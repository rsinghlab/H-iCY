from numpy.core.numeric import full
from src.evaluation import correlation_analysis, biological_analysis, downstream_analysis
from src import globals
import os

def evaluate(result_name, 
             target_chromosome_file, 
             upscaled_chromosome_files, 
             target_cutoff, 
             upscaled_cutoffs, 
             experiment_names, 
             full_results=False,
             steps=[],
             temp_dir=os.path.join(globals.TEMP_DATA_DIRECTORY, '3dqc_temp/')
    ):
    '''
        This is a wrapper function that runs all the evaluation scripts on the base vs upscaled chromosome files
        @params: result_name <string>, name of the results generated by this function
        @params: base_chromosome_files <string>, path to the base chromosome files
        @params: upscaled_chromosome_files, path to the upscaled chromosome files
        @params: target_cutoff <int> cut off value for the target chromosome to use for normalization
        @params: upscaled_cutoff <int> cut off value to use for upscaled chromosomes
        @params: full_results <bool> either dump just the mean values or the entire result
        @params: steps <List> name of the evaluation functions to run
    '''
    with open('results/{}.txt'.format(result_name), 'a+') as f:
        f.write("++++++++++++++++++++++++++++{}++++++++++++++++++++++++++++++++++++\n".format(result_name))
    
    print(len(upscaled_chromosome_files), len(experiment_names), len(upscaled_cutoffs))

    for idx, upscaled_chromosome_file in enumerate(upscaled_chromosome_files):
        print("Experiment exists {}".format(os.path.exists(upscaled_chromosome_file)))
        
        if 'correlation_metrics' in steps:
            print("Running Correlation Metrics on experiment: {}...".format(experiment_names[idx]))
            analysis_results = ''
            analysis_results += correlation_analysis.compute_correlation_metrics_on_experiment_directory(
                    target_chromosome_file, 
                    upscaled_chromosome_file,
                    experiment_names[idx], 
                    base_cutoff=upscaled_cutoffs[idx],
                    target_cutoff=target_cutoff, 
                    dataset='test', full_results=full_results)
            analysis_results += '\n'
            with open('results/{}.txt'.format(result_name), 'a+') as f:
                f.write(analysis_results)

        if 'hicrep' in steps:
            print("Running HiC Specific Similarity (HiCRep) Metrics on experiment: {}...".format(experiment_names[idx]))
        
            analysis_results = ''
            analysis_results += biological_analysis.compute_hicrep_scores_on_experiment_directory(
                upscaled_chromosome_file,
                target_chromosome_file,
                experiment_names[idx],
                base_cutoff=upscaled_cutoffs[idx],
                target_cutoff=target_cutoff,
                dataset='test',
                full_results=full_results
            )
            analysis_results += '\n'
            with open('results/{}.txt'.format(result_name), 'a+') as f:
                f.write(analysis_results)

        if 'biological_metrics' in steps:
            print("Running HiC Specific Similarity (GenomeDISCO, HiC-Spector and QuaSAR-Rep) Metrics on experiment: {}...".format(experiment_names[idx]))
        
            analysis_results = ''
            analysis_results += biological_analysis.compute_hicspector_gdisco_qrep_scores_on_experiment_directory(
                upscaled_chromosome_file,
                target_chromosome_file,
                experiment_names[idx],
                base_cutoff=upscaled_cutoffs[idx],
                target_cutoff=target_cutoff,
                dataset='test',
                full_results=full_results,
                temp_dir=temp_dir
            )
            analysis_results += '\n'
            with open('results/{}.txt'.format(result_name), 'a+') as f:
                f.write(analysis_results)

        if '3d_similarity' in steps:
            print("Running 3D similarity analyis on experiment: {}...".format(experiment_names[idx]))
        
            analysis_results = ''
            analysis_results += downstream_analysis.reconstruction_score(
                upscaled_chromosome_file,
                target_chromosome_file,
                experiment_names[idx],
                base_cutoff=upscaled_cutoffs[idx],
                target_cutoff=target_cutoff,
                chunk=200,
                stride=200,
                bound=190,
                upscale=255,
                dataset='test',
                full_results=full_results
            )
            analysis_results += '\n'
            with open('results/{}.txt'.format(result_name), 'a+') as f:
                f.write(analysis_results)
        
        if 'significant_interaction' in steps:
            print("Running Significant Interactions analysis on experiment: {}...".format(experiment_names[idx]))
        
            analysis_results = ''
            analysis_results += downstream_analysis.significant_interaction_recovery(
                upscaled_chromosome_file,
                target_chromosome_file,
                experiment_names[idx],
                base_cutoff=upscaled_cutoffs[idx],
                target_cutoff=target_cutoff,
                upscale=255, dataset='test', 
                verbose=False, full_results=full_results
            )
            analysis_results += '\n'
            with open('results/{}.txt'.format(result_name), 'a+') as f:
                f.write(analysis_results)

        

    with open('results/{}.txt'.format(result_name), 'a+') as f:
        f.write("++++++++++++++++++++++++++++{}++++++++++++++++++++++++++++++++++++\n".format(result_name))
    

















































